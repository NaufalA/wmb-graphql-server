package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.63

import (
	"context"

	"github.com/NaufalA/wmb-graphql-server/graph"
	"github.com/NaufalA/wmb-graphql-server/graph/model"
	"github.com/NaufalA/wmb-graphql-server/internal/dto"
)

// CreateProduct is the resolver for the createProduct field.
func (r *mutationResolver) CreateProduct(ctx context.Context, input model.CreateProductInput) (*model.Product, error) {
	return r.productRepository.CreateProduct(ctx, input)
}

// UpdateProduct is the resolver for the updateProduct field.
func (r *mutationResolver) UpdateProduct(ctx context.Context, input model.UpdateProductInput) (*model.Product, error) {
	return r.productRepository.UpdateProduct(ctx, input)
}

// DeleteProduct is the resolver for the deleteProduct field.
func (r *mutationResolver) DeleteProduct(ctx context.Context, id string) (*string, error) {
	return r.productRepository.DeleteProduct(ctx, id)
}

// GetProduct is the resolver for the getProduct field.
func (r *queryResolver) GetProduct(ctx context.Context, id string) (*model.Product, error) {
	return r.productRepository.GetProduct(ctx, id)
}

// ListProducts is the resolver for the listProducts field.
func (r *queryResolver) ListProducts(
	ctx context.Context, first *int32, after *string, last *int32, before *string, search *string,
) (*model.ProductConnection, error) {
	return r.productRepository.ListProducts(ctx, dto.ConnectionRequest{
		First:  first,
		After:  after,
		Last:   last,
		Before: before,
		Search: search,
	})
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
