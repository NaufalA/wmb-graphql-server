type User {
  id: ID!
  email: String
  fullName: String
  role: String
  createTime: Time
  updateTime: Time
}

type UserEdge {
  cursor: ID!
  node: User
}

type UserConnection {
  edges: [UserEdge]!
  pageInfo: PageInfo!
}

extend type Query {
  getUser(id: ID!): User
  listUsers(
    first: Int,
    after: String,
    last: Int,
    before: String,
    search: String,
): UserConnection!
}

input CreateUserInput {
  email: String!
  fullName: String!
  password: String!
}

input UpdateUserInput {
  id: ID!
  email: String
  fullName: String
  role: String
}

extend type Mutation {
  createUser(input: CreateUserInput!): User
  updateUser(input: UpdateUserInput!): User
  deleteUser(id: ID!): ID
}