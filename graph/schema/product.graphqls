type Product {
  id: ID!
  productName: String
  price: Float
  stock: Float
  stockUnit: String
  createTime: Time
  updateTime: Time
}

type ProductEdge {
  cursor: ID!
  node: Product
}

type ProductConnection {
  edges: [ProductEdge]!
  pageInfo: PageInfo!
}

extend type Query {
  getProduct(id: ID!): Product
  listProducts(
    first: Int,
    after: String,
    last: Int,
    before: String,
    search: String,
  ): ProductConnection!
}

input CreateProductInput {
  productName: String!
  price: Float!
  stock: Float!
  stockUnit: String!
}

input UpdateProductInput {
  id: ID!
  productName: String
  price: Float
  stock: Float
  stockUnit: String
}

extend type Mutation {
  createProduct(input: CreateProductInput!): Product
  updateProduct(input: UpdateProductInput!): Product
  deleteProduct(id: ID!): ID
}